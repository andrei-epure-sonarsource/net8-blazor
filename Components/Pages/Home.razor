@page "/"
@inject ILoggerFactory LoggerFactory

@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
<button @onclick="ReloadButton" disabled="@(!IsConnected)">Reload</button>

<p placeholder="<Loading connection id>" @bind="connectionId" />

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

<ETFGeoVisualizer></ETFGeoVisualizer>

@code {
    private HubConnection? hubConnection;
    private string? connectionId;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;
    private int reloadMessagesCount = 0;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<List<string>>("ReloadMessages", (serverMessages) =>
        {
            ILogger<Home> logger = LoggerFactory.CreateLogger<Home>();
            logger.LogWarning($"Logging from client side ReloadMessages the {reloadMessagesCount}th time");
            reloadMessagesCount++;

            messages.AddRange(serverMessages);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("ReceiveMessage", (message) =>
        {
            messages.Add(message);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        connectionId = hubConnection.ConnectionId;
        await hubConnection.SendAsync("Reload", connectionId);
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            var message = $"{userInput}: {messageInput}";
            ILogger<Home> logger = LoggerFactory.CreateLogger<Home>();
            logger.LogWarning($"Logging from client side Send {message}");
            await hubConnection.SendAsync("SendMessage", message);
        }
    }

    private async Task ReloadButton()
    {
        if (hubConnection is not null)
        {
            ILogger<Home> logger = LoggerFactory.CreateLogger<Home>();
            logger.LogWarning("Logging from client side ReloadButton");
            await hubConnection.SendAsync("Reload", hubConnection.ConnectionId);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}