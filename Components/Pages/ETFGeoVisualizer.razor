@using Microsoft.AspNetCore.Mvc.Rendering;
@using System.Text.RegularExpressions
@using System.Globalization

@inject IJSRuntime JS

@page "/etfGeoVisualizer"
@rendermode InteractiveServer

<PageTitle>ETF Geo Visualizer</PageTitle>

<input placeholder="Search an asset by ticker regex" @onchange="@((ChangeEventArgs e) => SearchAsset(e.Value.ToString()))" />
<p>@searchAssetError</p>

<p>
    <table>
        @foreach (var asset in assets)
        {
            <tr>
                <td><input @bind="asset.Ticker" /></td>
                <td><input @bind="asset.AssetClass" /></td>
                <td><input @bind="asset.Description" /></td>
            </tr>
        }
    </table>
</p>


<button @onclick="AddPositionAsync">Add asset to portfolio</button>

<p>
    <h3>Positions in portfolio: @positions.Count()</h3>

    <table>
        @foreach (var position in positions)
        {
            <tr>
                <td>
                    <input type="checkbox" />
                </td>
                <td>
                    <input @bind="position.Ticker" />
                </td>
                <td>
                    <p>Test</p>
                </td>
            </tr>
        }
    </table>
</p>

<p>
    <h3>Geographic allocation:</h3>

    <div id="worldMapContainer"></div>
</p>

@code {
    private static IDatabase database = new FakeDatabase();

    private string? searchAssetRegex = null;
    private string? searchAssetError = null;
    private List<Asset> assets = new();
    private List<PositionView> positions = new();

    protected override async Task OnInitializedAsync()
    {
        SearchAsset(string.Empty);
    }

    private void SearchAsset(string searchAssetRegex)
    {
        if (!string.IsNullOrWhiteSpace(searchAssetRegex))
        {
            if (IsValidRegex(searchAssetRegex))
            {
                assets = database.RetrieveAssetsMatchingPattern(searchAssetRegex);
                searchAssetError = $"Found {assets.Count} assets";
            }
            else
            {
                searchAssetError = "Error: invalid regex";
                assets = new();
            }
        }
        else
        {
            searchAssetError = "Error: empty regex";
            assets = new();
        }
    }

    private async Task AddPositionAsync()
    {
        if (assets.Count == 1 && assets.Single() is not null and var asset)
        {
            positions.Add(
                new PositionView
                {
                    Asset = asset,
                    Ticker = asset.Ticker,
                    AssetClass = asset.AssetClass.ToString(),
                    Description = asset.Description,
                    WeightInPortfolio = (100m / (positions.Count() + 1)).ToString(CultureInfo.InvariantCulture)
                });

            var geoWeights = (
                from position in positions
                from geoWeight in position.Asset.GeoAllocation
                let geoWeightWeighted = geoWeight.Percentage * decimal.Parse(position.WeightInPortfolio)
                select new { geoWeight.Area, geoWeightWeighted }
            ).ToArray();

            var geoAreasSharesOfPortfolio = (
                from geoWeight in geoWeights
                group geoWeight by geoWeight.Area into geoWeightAreaGroup
                select new { geoArea = geoWeightAreaGroup.Key, geoWeight = geoWeightAreaGroup.Select(x => x.geoWeightWeighted).Sum()}
            ).ToArray();

            var geoAreasSharesOfPortfolioDict = geoAreasSharesOfPortfolio.ToDictionary(x => x.geoArea, x => x.geoWeight);
            var geoAreasSharesOfPortfolioJson = System.Text.Json.JsonSerializer.Serialize(geoAreasSharesOfPortfolioDict);
            // """{ "US": 0.5, "Europe": 0.5 }""";
            await JS.InvokeVoidAsync("showWorldMap", "worldMapContainer", geoAreasSharesOfPortfolioJson);

            SearchAsset(searchAssetRegex);
        }
    }

    private static bool IsValidRegex(string pattern)
    {
        if (string.IsNullOrWhiteSpace(pattern))
            return false;

        try
        {
            Regex.Match("", pattern);
            return true;
        }
        catch (ArgumentException)
        {
            return false;
        }
    }
}
